@using System.Web.Mvc.Html
@using GlobalResources
@using Microsoft.Azure.Devices.Applications.RemoteMonitoring.DeviceAdmin.Web.Helpers
@model Microsoft.Azure.Devices.Applications.RemoteMonitoring.DeviceAdmin.Web.Models.EditLocationRuleModel

@{
    ViewBag.Title = "Edit Location Rule Properties";
    Layout = "~/Views/Shared/_LayoutNoNavigation.cshtml";
}

<header class="header_main">
    <button class="header_main__button_back" type="button"></button>
    @{
        string pageHeader = string.Format(Strings.EditLocationRuleFormatted, @Strings.Edit);
        bool isDefaultRule = Model.RegionId == Strings.DefaultRuleID;
        string ruleEnabledStateIconUrl = "";
     }
    @{
        if (isDefaultRule)
        {
            pageHeader = Strings.EditDefaultLocationRule;
        }
        else
        {
            if (Model.IsCreateRequest)
            {
                pageHeader = string.Format(Strings.EditLocationRuleFormatted, @Strings.Create);
            }
        }

        if (Model.EnabledState)
        {
            ruleEnabledStateIconUrl = "~/Content/img/rule_enabled.png";
        }
        else
        {
            ruleEnabledStateIconUrl = "~/Content/img/rule_disabled.png";
        }
     }    
    
    <h2 style="float: left;" class="header_main__subhead header_main__subhead--large">@pageHeader</h2>
    <img src="@Url.Content(ruleEnabledStateIconUrl)" class="rule_enabledstate_icon"/>
    
</header>
<div class="content_outer">
    <div class="content_inner">
        <div id="content">
            <div id="locationRuleMetadataForm">
                @using (Ajax.BeginForm("UpdateRuleProperties", "LocationRules", null,
                new AjaxOptions()
                {
                    HttpMethod = "POST",
                    OnBegin = "IoTApp.EditLocationRuleProperties.onBegin",
                    OnFailure = "IoTApp.EditLocationRuleProperties.onFailure",
                    OnSuccess = "IoTApp.EditLocationRuleProperties.onSuccess",
                    OnComplete = "IoTApp.EditLocationRuleProperties.onComplete",
                    LoadingElementId = "loadingElement"
                }, null))
                {
                    @Html.AntiForgeryToken()
                    @Html.HiddenFor(m => m.Etag)
                    @Html.HiddenFor(m => m.EnabledState)

                    <div class="edit_form_leftpanel">
                        <fieldset class="edit_form">
                            @{ string state = @Strings.Enabled; }
                            @{if (!Model.EnabledState)
                                {
                                    state = @Strings.Disabled;
                                }
                            }
                            <label class="edit_form__label">@Strings.RegionId</label>
                            @Html.TextBoxFor(m => m.RegionId, new { id = "txtRegionId", @readonly = "readonly", @class = "input_text--readonly" })                            

                            <label class="edit_form__label">@Strings.RegionLatitude</label>
                            @Html.TextBoxFor(m => m.RegionLatitude, new { @readonly = "readonly", @class = "input_text--readonly" })

                            <label class="edit_form__label">@Strings.RegionLongitude</label>
                            @Html.TextBoxFor(m => m.RegionLongitude, new { @readonly = "readonly", @class = "input_text--readonly" })

                            <label class="edit_form__label">@Strings.RegionHeader</label>
                            @{
                                if (isDefaultRule)
                                {
                                    @Html.TextBoxFor(m => m.Region, new { id = "hdnRegion", @readonly = "readonly", @class = "input_text--readonly" })
                                }
                                else
                                {
                                    @Html.HiddenFor(m => m.Region, new { id = "hdnRegion" })
                                    <input id="txtRegion" readonly="readonly" class="input_text--readonly" type="text" />
                                }
                            }                            
                            <select id="ddlCountries" class="edit_form__select"></select>
                            <select id="ddlStates" class="edit_form__select"></select>
                            
                        </fieldset>
                    </div>
                    <div class="edit_form_rightpanel">
                        <fieldset class="edit_form">
                            
                            @*@Html.DropDownListFor(m => m.DataField, Model.AvailableDataFields, new { @class = "edit_form__select" })*@
                            <label class="edit_form__label">@Strings.RuleIdHeader</label>
                            @{
                                object attributes = new { @Title = Strings.LettersNumbersUnderscoresOnly, @class = "edit_form__text" };

                                if (isDefaultRule)
                                {
                                    attributes = new { @readonly = "readonly", @class = "input_text--readonly" };
                                }
                            }
                            @Html.TextBoxFor(m => m.RuleId, attributes)

                            <label class="edit_form__label">@Strings.VerticalThreshold</label>
                            @Html.TextBoxFor(m => m.VerticalThreshold, new { @Title = Strings.DoubleCommandHint, @class = "edit_form__text" })

                            <label class="edit_form__label">@Strings.LateralThreshold</label>
                            @Html.TextBoxFor(m => m.LateralThreshold, new { @Title = Strings.DoubleCommandHint, @class = "edit_form__text" })

                            <label class="edit_form__label">@Strings.ForwardThreshold</label>
                            @Html.TextBoxFor(m => m.ForwardThreshold, new { @Title = Strings.DoubleCommandHint, @class = "edit_form__text" })

                            <label class="edit_form__label">@Strings.RuleOutput</label>
                            @Html.TextBoxFor(m => m.RuleOutput, new { @Title = Strings.LettersNumbersUnderscoresOnly, @class = "edit_form__text" })                        
    
                                @*<label class="edit_form__label">@Strings.OperatorHeader</label>
                                @Html.HiddenFor(m => m.Operator)
                                <p class="edit_form__edit_rule_value_display">@Model.Operator</p>

                                <label class="edit_form__label">@Strings.RuleOutputHeader</label>
                                @{
                                    object htmlAttributes = new { @class = "edit_form__select edit_form_control_last" };
                                    if (Model.AvailableRuleOutputs.Count < 2)
                                    {
                                        htmlAttributes = new { @disabled = "disabled", @class = "edit_form__select edit_form_control_last" };
                                        @Html.HiddenFor(m => m.RuleOutput);
                                    }
                                }
                                @Html.DropDownListFor(m => m.RuleOutput, Model.AvailableRuleOutputs, htmlAttributes)*@
                            <button class="button_base update_rule_properties location_rule_button" type="submit">@Strings.SaveAndViewRules</button>

                        </fieldset>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<script type="text/javascript">
    "use strict";

    var resources = {
        redirectUrl: '@Url.Action("Index", "LocationRules")',
        failedToGetCountryStateList:'@Html.JavaScriptString(Strings.FailedToGetCountryStateList)',
        ruleUpdateError: '@Html.JavaScriptString(Strings.RuleUpdateError)',
        defaultRuleName: '@Html.JavaScriptString(Strings.DefaultRuleID)',
        enabledString: '@Html.JavaScriptString(Strings.Enabled)',
        disabledString: '@Html.JavaScriptString(Strings.Disabled)'
    }
</script>

<script type="text/javascript" src="~/Scripts/Views/LocationRules/EditLocationRuleProperties.js?ver=@Constants.JSVersion"></script>

