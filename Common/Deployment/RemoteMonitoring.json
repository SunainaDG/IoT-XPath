{
    "$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json",
    "contentVersion": "1.0.0.0",
    "parameters": {
        "aadTenant": {
            "type": "string",
            "metadata": {
                "description": "The name of the service Tenant"
            }
        },
        "aadInstance": {
            "type": "string",
            "defaultValue": "https://login.microsoftonline.com/{0}",
            "metadata": {
                "description": "Url of the AAD login page (example: https://login.microsoftonline.de/{0})"
            }
        },
        "aadClientId": {
            "type": "string",
            "metadata": {
                "description": "AAD application identifier (GUID)"
            }
        },
        "storageEndpointSuffix": {
            "type": "string",
            "metadata": {
                "description": "Suffix added to Azure Storage hostname (examples: core.windows.net, core.cloudapi.de)"
            }
        },
        "suiteName": {
            "type": "string",
            "metadata": {
                "description": "The name of the suite"
            }
        },
        "docDBName": {
            "type": "string",
            "metadata": {
                "description": "The name of the documentDB"
            }
        },
        "docDBSku": {
            "type": "string",
            "defaultValue": "Standard",
            "metadata": {
                "description": "The DocumentDB Sku"
            }
        },
        "storageName": {
            "type": "string",
            "metadata": {
                "description": "The name of the storageAccount"
            }
        },
        "storageAccountSku": {
            "type": "string",
            "defaultValue": "Standard_GRS",
            "metadata": {
                "description": "The storage Sku"
            }
        },
        "iotHubName": {
            "type": "string",
            "metadata": {
                "description": "The name of the iotHub"
            }
        },
        "iotHubSku": {
            "type": "string",
            "defaultValue": "S1",
            "metadata": {
                "description": "The Iothub Sku"
            }
        },
        "iotHubTier": {
            "type": "string",
            "defaultValue": "Standard",
            "metadata": {
                "description": "The Iothub tier"
            }
        },
        "ehName": {
            "type": "string",
            "metadata": {
                "description": "The name of the eventHub"
            }
        },
        "ehSku": {
            "type": "int",
            "defaultValue": 1,
            "metadata": {
                "description": "The eventhub Sku"
            }
        },
        "packageUri": {
            "type": "string",
            "defaultValue": "https://aka.ms/azureiot/remotemonitoring/web"
        },
        "webJobPackageUri": {
            "type": "string",
            "defaultValue": "https://aka.ms/azureiot/remotemonitoring/webjob"
        },
        "webSku": {
            "type": "string",
            "defaultValue": "Premium",
            "metadata": {
                "description": "The Sku type of the webapp"
            }
        },
        "webWorkerSize": {
            "type": "int",
            "defaultValue": 0,
            "metadata": {
                "description": "The size of the webapp"
            }
        },
        "webWorkerCount": {
            "type": "int",
            "defaultValue": 2,
            "metadata": {
                "description": "The webapp worker count"
            }
        },
        "webJobSku": {
            "type": "string",
            "defaultValue": "Standard",
            "metadata": {
                "description": "The Sku type of the webjob"
            }
        },
        "webJobWorkerSize": {
            "type": "int",
            "defaultValue": 0,
            "metadata": {
                "description": "The size of the webjob"
            }
        },
        "webJobWorkerCount": {
            "type": "int",
            "defaultValue": 2,
            "metadata": {
                "description": "The webjob worker count"
            }
        },
        "asaStartBehavior": {
            "type": "string",
            "metadata": {
                "description": "The start behavior for Stream Analytics jobs [LastStopTime | JobStartTime (default)]"
            },
            "defaultValue": "JobStartTime"
        }
    },
    "variables": {
        "location": "[resourceGroup().location]",
        "storageVersion": "2016-01-01",
        "storageId": "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageName'))]",
        "ehVersion": "[providers('Microsoft.Eventhub', 'namespaces').apiVersions[0]]",
        "ehOutName": "[concat(parameters('ehName'), '-ehout')]",
        "ehRuleOutName": "[concat(parameters('ehName'), '-ehruleout')]",
        "sbKeyName": "RootManageSharedAccessKey",
        "ehResourceId": "[resourceId('Microsoft.Eventhub/namespaces/authorizationRules', parameters('ehName'), variables('sbKeyName'))]",
        "saVersion": "2015-10-01",
        "webVersion": "2015-04-01",
        "webJobPlanName": "[concat(parameters('suiteName'), '-jobsplan')]",
        "webJobSiteName": "[concat(parameters('suiteName'), '-jobhost')]",
        "webPlanName": "[concat(parameters('suiteName'), '-plan')]",
        "webSiteName": "[parameters('suiteName')]",
        "storageEndpointSuffix": "[parameters('storageEndpointSuffix')]",
        "docDBVersion": "2015-04-08",
        "docDBResourceId": "[resourceId('Microsoft.DocumentDb/databaseAccounts', parameters('docDBName'))]",
        "iotHubVersion": "2016-02-03",
        "iotHubResourceId": "[resourceId('Microsoft.Devices/Iothubs', parameters('iotHubName'))]",
        "iotHubKeyName": "iothubowner",
        "iotHubKeyResource": "[resourceId('Microsoft.Devices/Iothubs/Iothubkeys', parameters('iotHubName'), variables('iotHubKeyName'))]",
        "rulesCGName": "rulescg",
		"defaultruleCGName": "defaultrulecg",
        "deviceInfoCGName": "deviceinfocg",
        "telemetryCGName": "telemetrycg",
		"feedbackCGName": "feedbackcg",
        "suiteType": "RemoteMonitoring"
    },
    "resources": [
        {
            "apiVersion": "[variables('docDBVersion')]",
            "type": "Microsoft.DocumentDb/databaseAccounts",
            "name": "[parameters('docDBName')]",
            "location": "[variables('location')]",
            "tags": {
                "IotSuiteType": "[variables('suiteType')]"
            },
            "properties": {
                "name": "[parameters('docDBName')]",
                "databaseAccountOfferType": "[parameters('docDBSku')]"
            }
        },
        {
            "apiVersion": "[variables('storageVersion')]",
            "type": "Microsoft.Storage/storageAccounts",
            "name": "[parameters('storageName')]",
            "location": "[variables('location')]",
            "tags": {
                "IotSuiteType": "[variables('suiteType')]"
            },
            "kind": "Storage",
            "sku": {
                "name": "[parameters('storageAccountSku')]"
            }
        },
        {
            "apiVersion": "[variables('iotHubVersion')]",
            "type": "Microsoft.Devices/Iothubs",
            "name": "[parameters('iotHubName')]",
            "location": "[variables('location')]",
            "sku": {
                "name": "[parameters('iotHubSku')]",
                "tier": "[parameters('iotHubTier')]",
                "capacity": 1
            },
            "tags": {
                "IotSuiteType": "[variables('suiteType')]"
            },
            "properties": {
                "location": "[variables('location')]"
            }
        },
        {
            "apiVersion": "[variables('iotHubVersion')]",
            "name": "[concat(parameters('iotHubName'), '/events/', variables('rulesCGName'))]",
            "type": "Microsoft.Devices/Iothubs/eventhubEndpoints/ConsumerGroups",
            "dependsOn": [
                "[concat('Microsoft.Devices/Iothubs/', parameters('iotHubName'))]"
            ]
        },
		{
            "apiVersion": "[variables('iotHubVersion')]",
            "name": "[concat(parameters('iotHubName'), '/events/', variables('defaultruleCGName'))]",
            "type": "Microsoft.Devices/Iothubs/eventhubEndpoints/ConsumerGroups",
            "dependsOn": [
                "[concat('Microsoft.Devices/Iothubs/', parameters('iotHubName'))]"
            ]
        },
        {
            "apiVersion": "[variables('iotHubVersion')]",
            "name": "[concat(parameters('iotHubName'), '/events/', variables('deviceInfoCGName'))]",
            "type": "Microsoft.Devices/Iothubs/eventhubEndpoints/ConsumerGroups",
            "dependsOn": [
                "[concat('Microsoft.Devices/Iothubs/', parameters('iotHubName'))]"
            ]
        },
        {
            "apiVersion": "[variables('iotHubVersion')]",
            "name": "[concat(parameters('iotHubName'), '/events/', variables('telemetryCGName'))]",
            "type": "Microsoft.Devices/Iothubs/eventhubEndpoints/ConsumerGroups",
            "dependsOn": [
                "[concat('Microsoft.Devices/Iothubs/', parameters('iotHubName'))]"
            ]
        },
		{
            "apiVersion": "[variables('iotHubVersion')]",
            "name": "[concat(parameters('iotHubName'), '/events/', variables('feedbackCGName'))]",
            "type": "Microsoft.Devices/Iothubs/eventhubEndpoints/ConsumerGroups",
            "dependsOn": [
                "[concat('Microsoft.Devices/Iothubs/', parameters('iotHubName'))]"
            ]
        },
        {
            "apiVersion": "[variables('ehVersion')]",
            "name": "[parameters('ehName')]",
            "type": "Microsoft.Eventhub/namespaces",
            "location": "[variables('location')]",
            "tags": {
                "IotSuiteType": "[variables('suiteType')]"
            },
            "properties": {
                "messagingSku": "[parameters('ehSku')]",
                "region": "[variables('location')]"
            },
            "resources": [
                {
                    "apiVersion": "[variables('ehVersion')]",
                    "name": "[variables('ehOutName')]",
                    "type": "eventHubs",
                    "location": "[variables('location')]",
                    "dependsOn": [
                        "[concat('Microsoft.Eventhub/namespaces/', parameters('ehName'))]"
                    ],
                    "properties": {
                        "path": "[variables('ehOutName')]",
                        "MessageRetentionInDays": 1
                    }
                },
                {
                    "apiVersion": "[variables('ehVersion')]",
                    "name": "[variables('ehRuleOutName')]",
                    "type": "eventHubs",
                    "location": "[variables('location')]",
                    "dependsOn": [
                        "[concat('Microsoft.Eventhub/namespaces/', parameters('ehName'))]"
                    ],
                    "properties": {
                        "path": "[variables('ehRuleOutName')]",
                        "MessageRetentionInDays": 1
                    }
                }
            ]
        },
        {
            "apiVersion": "[variables('saVersion')]",
            "type": "Microsoft.StreamAnalytics/streamingjobs",
            "name": "[concat(parameters('suiteName'), '-Telemetry')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', parameters('storageName'))]",
                "[concat('Microsoft.Devices/Iothubs/', parameters('iotHubName'))]"
            ],
            "tags": {
                "IotSuiteType": "[variables('suiteType')]"
            },
            "properties": {
                "sku": {
                    "name": "standard"
                },
                "OutputStartMode": "[parameters('asaStartBehavior')]",
				"EventsLateArrivalMaxDelayInSeconds": 2,
                "EventsOutOfOrderMaxDelayInSeconds": 10,
                "EventsOutOfOrderPolicy": "adjust",
                "Inputs": [
                    {
                        "Name": "IoTHubStream",
                        "Properties": {
                            "DataSource": {
                                "Properties": {
                                    "consumerGroupName": "[variables('telemetryCGName')]",
                                    "iotHubNamespace": "[parameters('iotHubName')]",
                                    "sharedAccessPolicyKey": "[listkeys(variables('iotHubKeyResource'), variables('iotHubVersion')).primaryKey]",
                                    "sharedAccessPolicyName": "[variables('iotHubKeyName')]"
                                },
                                "Type": "Microsoft.Devices/IotHubs"
                            },
                            "Serialization": {
                                "Properties": {
                                    "Encoding": "UTF8"
                                },
                                "Type": "Json"
                            },
                            "Type": "Stream"
                        }
                    }
                ],
                "Outputs": [
                    {
                        "Name": "Telemetry",
                        "Properties": {
                            "DataSource": {
                                "Properties": {
                                    "Container": "devicetelemetry",
                                    "DateFormat": "yyyy/MM/dd",
                                    "TimeFormat": "HH",
                                    "PathPattern": "devicetelemetry/{date}/{time}",
                                    "StorageAccounts": [
                                        {
                                            "AccountKey": "[listkeys(variables('storageId'), variables('storageVersion')).keys[0].value]",
                                            "AccountName": "[parameters('storageName')]"
                                        }
                                    ]
                                },
                                "Type": "Microsoft.Storage/Blob"
                            },
                            "Serialization": {
                                "Properties": {
                                    "Encoding": "UTF8",
                                    "FieldDelimiter": ","
                                },
                                "Type": "Csv"
                            }
                        }
                    },
                    {
                        "Name": "TelemetrySummary",
                        "Properties": {
                            "DataSource": {
                                "Properties": {
                                    "Container": "devicetelemetry",
                                    "DateFormat": "yyyy/MM/dd",
                                    "TimeFormat": "HH",
                                    "PathPattern": "devicetelemetry-summary/{date}/{time}",
                                    "StorageAccounts": [
                                        {
                                            "AccountKey": "[listkeys(variables('storageId'), variables('storageVersion')).keys[0].value]",
                                            "AccountName": "[parameters('storageName')]"
                                        }
                                    ]
                                },
                                "Type": "Microsoft.Storage/Blob"
                            },
                            "Serialization": {
                                "Properties": {
                                    "Encoding": "UTF8",
                                    "FieldDelimiter": ","
                                },
                                "Type": "Csv"
                            }
                        }
                    }
                ],
                "Transformation": {
                    "Name": "AllToBlob",
                    "Properties": {
                        "Query": "WITH \r\n    [StreamData]\r\nAS (\r\n    SELECT\r\n        *\r\n    FROM\r\n        [IotHubStream]\r\n    PARTITION BY \r\n        PartitionId\r\n    WHERE\r\n        [ObjectType] IS NULL\r\n)\r\n\r\nSELECT\r\n    hub.IoTHub.ConnectionDeviceId AS DeviceId,\r\n    hub.PartitionId AS PartitionId,\r\n    hub.EventProcessedUtcTime AS iotEventProcessedUtcTime,\r\n    hub.EventEnqueuedUtcTime AS iotEventEnqueuedUtcTime,\r\n    hub.Latitude AS Latitude,\r\n    hub.Longitude AS Longitude,\r\n    hub.Altitude AS Altitude,\r\n    hub.Speed AS CarSpeed,\r\n    hub.Heading AS HeadingTowards,\r\n    jerks.ArrayValue.VerticalJerk AS VerticalJerk,\r\n    jerks.ArrayValue.LateralJerk AS LateralJerk,\r\n    jerks.ArrayValue.ForwardJerk AS ForwardJerk,\r\n    jerks.ArrayValue.JerkTimeStamp AS JerkTimeStamp,\r\n    CASE\r\n        WHEN (jerks.ArrayValue.VerticalJerk = 0) AND (jerks.ArrayValue.LateralJerk = 0) AND (jerks.ArrayValue.ForwardJerk = 0)\r\n        THEN -1\r\n        ELSE jerks.ArrayIndex + 1\r\n    END AS JerkCount\r\nINTO\r\n    [Telemetry]\r\nFROM\r\n    [StreamData] AS hub\r\nPARTITION BY \r\n    PartitionId\r\nCROSS APPLY\r\n    GetArrayElements(hub.CapturedJerks) AS jerks\r\n\r\n\r\nSELECT\r\n    IoTHub.ConnectionDeviceId AS DeviceId,\r\n    AVG(Speed) AS AverageSpeed,\r\n    MAX(Speed) AS MaximumSpeed,\r\n    MIN(Speed) AS MinimumSpeed,\r\n    5.0 as TimeframeMinutes\r\nINTO\r\n    [TelemetrySummary]\r\nFROM\r\n    [StreamData]\r\nWHERE\r\n    [Speed] <> 0\r\nGROUP BY\r\n    IoTHub.ConnectionDeviceId,SLIDINGWINDOW(minute,5)",
                        "StreamingUnits": 1
                  }
                }
            }
        },
        {
            "apiVersion": "[variables('saVersion')]",
            "type": "Microsoft.StreamAnalytics/streamingjobs",
            "name": "[concat(parameters('suiteName'), '-DeviceInfo')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('Microsoft.Eventhub/namespaces/', parameters('ehName'), '/eventHubs/', variables('ehOutName'))]",
                "[concat('Microsoft.Devices/Iothubs/', parameters('iotHubName'))]"
            ],
            "tags": {
                "IotSuiteType": "[variables('suiteType')]"
            },
            "properties": {
                "sku": {
                    "name": "standard"
                },
                "OutputStartMode": "[parameters('asaStartBehavior')]",
				"EventsLateArrivalMaxDelayInSeconds": 2,
                "EventsOutOfOrderMaxDelayInSeconds": 10,
                "EventsOutOfOrderPolicy": "adjust",
                "Inputs": [
                    {
                        "Name": "DeviceDataStream",
                        "Properties": {
                            "DataSource": {
                                "Properties": {
                                    "consumerGroupName": "[variables('deviceInfoCGName')]",
                                    "iotHubNamespace": "[parameters('iotHubName')]",
                                    "sharedAccessPolicyKey": "[listkeys(variables('iotHubKeyResource'), variables('iotHubVersion')).primaryKey]",
                                    "sharedAccessPolicyName": "[variables('iotHubKeyName')]"
                                },
                                "Type": "Microsoft.Devices/IotHubs"
                            },
                            "Serialization": {
                                "Properties": {
                                    "Encoding": "UTF8"
                                },
                                "Type": "Json"
                            },
                            "Type": "Stream"
                        }
                    }
                ],
                "Outputs": [
                    {
                        "Name": "DeviceInfoEvents",
                        "Properties": {
                            "DataSource": {
                                "Properties": {
                                    "EventHubName": "[variables('ehOutName')]",
                                    "ServiceBusNamespace": "[parameters('ehName')]",
                                    "SharedAccessPolicyKey": "[listkeys(variables('ehResourceId'), variables('ehVersion')).primaryKey]",
                                    "SharedAccessPolicyName": "[variables('sbKeyName')]",
                                    "PartitionKey": "PartitionId"
                                },
                                "Type": "Microsoft.ServiceBus/EventHub"
                            },
                            "Serialization": {
                                "Properties": {
                                    "Encoding": "UTF8",
                                    "Format": "Array"
                                },
                                "Type": "Json"
                            }
                        }
                    }
                ],
                "Transformation": {
                    "Name": "DeviceInfoFilter",
                    "Properties": {
                        "Query": "SELECT \r\n    *\r\nINTO \r\n    DeviceInfoEvents  \r\nFROM \r\n    DeviceDataStream \r\nPartition By \r\n    PartitionId \r\nWHERE  \r\n    ObjectType = 'DeviceInfo'\r\n\r\n",
                        "StreamingUnits": 1
                    }
                }
            }
        },
        {
            "apiVersion": "[variables('saVersion')]",
            "type": "Microsoft.StreamAnalytics/streamingjobs",
            "name": "[concat(parameters('suiteName'), '-Rules')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', parameters('storageName'))]",
                "[concat('Microsoft.Eventhub/namespaces/', parameters('ehName'), '/eventHubs/', variables('ehRuleOutName'))]",
                "[concat('Microsoft.Devices/Iothubs/', parameters('iotHubName'))]"
            ],
            "tags": {
                "IotSuiteType": "[variables('suiteType')]"
            },
            "properties": {
                "sku": {
                    "name": "standard"
                },
                "OutputStartMode": "[parameters('asaStartBehavior')]",
				"EventsLateArrivalMaxDelayInSeconds": 5,
                "EventsOutOfOrderMaxDelayInSeconds": 10,
                "EventsOutOfOrderPolicy": "adjust",
				"Functions": [
					{
						"Name": "GetJerks",
						"Properties": {
							"Properties": {
								"Binding": {
									"Properties": {
										"Script": "// UDF (User Defined Function)which returns Captured Jerks if they cross the threshold.\nfunction main(v_threshold,l_threshold,f_threshold,CapturedJerks) {\n    if(v_threshold != null && l_threshold != null && f_threshold != null && CapturedJerks != null)\n    {\n        var hasCrossedThreshold = Boolean(0);\n        var ReturnJerks = null;\n        var jerk;\n\n        for(var i=0;i<CapturedJerks.length;i++)\n        {\n            jerk = CapturedJerks[i];\n            if(Math.abs(jerk.VerticalJerk) > parseFloat(v_threshold) || Math.abs(jerk.LateralJerk) > parseFloat(l_threshold) ||Math.abs(jerk.ForwardJerk) > parseFloat(f_threshold))\n            {\n                hasCrossedThreshold = Boolean(1);\n                break;\n            }  \n        }\n\n        if(hasCrossedThreshold)\n        {\n  		  ReturnJerks = CapturedJerks;\n        }\n\n        return ReturnJerks;\n    }    \n}"
									},
									"Type": "Microsoft.StreamAnalytics/JavascriptUdf"
								},
								"Inputs": [
									{
										"DataType": "any"
									},
									{
										"DataType": "any"
									},
									{
										"DataType": "any"
									},
									{
										"DataType": "any"
									}
								],
								"Output": {
									"DataType": "any"
								}
							},
							"Type": "Scalar"
						}
                    },
					{
						"Name": "GetLocationRuleID",
						"Properties": {
							"Properties": {
                                "Binding": {
									"Properties": {
										"Script": "// UDF which creates ruleID of a location from latitude and longitude.\nfunction main(latitude, longitude) {    \n    var lat = Math.floor(latitude*100)/100;\n    var lng = Math.floor(longitude*100)/100;\n    \n    return lat.toString()+\"_\"+lng.toString();\n}"
									},
									"Type": "Microsoft.StreamAnalytics/JavascriptUdf"
                                },
                                "Inputs": [
									{
										"DataType": "any"
									},
									{
										"DataType": "any"
									}
                                ],
                                "Output": {
									"DataType": "any"
                                }
							},
							"Type": "Scalar"
						}
					},
					{
						"Name": "GetStringVersion",
						"Properties": {
							"Properties": {
                                "Binding": {
									"Properties": {
										"Script": "// UDF that stringifies a json object\nfunction main(collection) {\n    return JSON.stringify(collection);\n}"
									},
									"Type": "Microsoft.StreamAnalytics/JavascriptUdf"
                                },
                                "Inputs": [
									{
										"DataType": "any"
									}
                                ],
                                "Output": {
									"DataType": "any"
                                }
							},
							"Type": "Scalar"
						}
					}
				],
                "Inputs": [
                    {
                        "Name": "LocationRulesBlob",
                        "Properties": {
                            "DataSource": {
                                "Properties": {
                                    "Container": "locationrules",
                                    "DateFormat": "yyyy-MM-dd",
                                    "PathPattern": "locationrules.json",
                                    "BlobName": "locationrules.json",
                                    "StorageAccounts": [
                                        {
                                            "AccountKey": "[listkeys(variables('storageId'), variables('storageVersion')).keys[0].value]",
                                            "AccountName": "[parameters('storageName')]"
                                        }
                                    ],
                                    "TimeFormat": "HH-mm"
                                },
                                "Type": "Microsoft.Storage/Blob"
                            },
                            "Serialization": {
                                "Properties": {
                                    "Encoding": "UTF8"
                                },
                                "Type": "Json"
                            },
                            "Type": "Reference"
                        }
                    },
                    {
                        "Name": "IotTelemetryStream",
                        "Properties": {
                            "DataSource": {
                                "Properties": {
                                    "consumerGroupName": "[variables('rulesCGName')]",
                                    "iotHubNamespace": "[parameters('iotHubName')]",
                                    "sharedAccessPolicyKey": "[listkeys(variables('iotHubKeyResource'), variables('iotHubVersion')).primaryKey]",
                                    "sharedAccessPolicyName": "[variables('iotHubKeyName')]"
                                },
                                "Type": "Microsoft.Devices/IotHubs"
                            },
                            "Serialization": {
                                "Properties": {
                                    "Encoding": "UTF8"
                                },
                                "Type": "Json"
                            },
                            "Type": "Stream"
                        }
                    }
                ],
                "Outputs": [
                    {
                        "Name": "LocationRulesHub",
                        "Properties": {
                            "DataSource": {
                                "Properties": {
                                    "EventHubName": "[variables('ehRuleOutName')]",
                                    "ServiceBusNamespace": "[parameters('ehName')]",
                                    "SharedAccessPolicyKey": "[listkeys(variables('ehResourceId'), variables('ehVersion')).primaryKey]",
                                    "SharedAccessPolicyName": "[variables('sbKeyName')]",
                                    "PartitionKey": "PartitionId"
                                },
                                "Type": "Microsoft.ServiceBus/EventHub"
                            },
                            "Serialization": {
                                "Properties": {
                                    "Encoding": "UTF8",
                                    "Format": "Array"
                                },
                                "Type": "Json"
                            }
                        }
                    },
                    {
                        "Name": "LocationRulesMonitoring",
                        "Properties": {
                            "DataSource": {
                                "Properties": {
                                    "Container": "rulesoutput",
                                    "DateFormat": "yyyy/MM/dd",
                                    "TimeFormat": "HH",
                                    "PathPattern": "{date}/{time}",
                                    "StorageAccounts": [
                                        {
                                            "AccountKey": "[listkeys(variables('storageId'), variables('storageVersion')).keys[0].value]",
                                            "AccountName": "[parameters('storageName')]"
                                        }
                                    ]
                                },
                                "Type": "Microsoft.Storage/Blob"
                            },
                            "Serialization": {
                                "Properties": {
                                    "Encoding": "UTF8",
                                    "FieldDelimiter": ","
                                },
                                "Type": "Csv"
                            }
                        }
                    }
                ],
                "Transformation": {
                    "Name": "LocationRules",
                    "Properties": {
                        "Query": "WITH \r\n    [StreamData]\r\nAS  (\r\n        SELECT\r\n            hub.IoTHub.ConnectionDeviceId AS DeviceId,\r\n            hub.PartitionId AS PartitionId,\r\n            hub.Latitude AS Latitude,\r\n            hub.Longitude AS Longitude,\r\n            hub.Altitude AS Altitude,\r\n            hub.Speed AS CarSpeed,\r\n            hub.Heading AS Heading,\r\n            hub.CapturedJerks AS CapturedJerks,\r\n            udf.GetLocationRuleID(hub.Latitude,hub.Longitude) AS RuleId\r\n        FROM \r\n            [IotTelemetryStream] as hub\r\n\t\tPARTITION BY \r\n\t\t\tPartitionId\r\n        WHERE \r\n            hub.[ObjectType] IS NULL\r\n),\r\n[MatchedData] AS\r\n(\r\n    SELECT\r\n        stream.RuleId,\r\n        stream.DeviceId,\r\n        stream.PartitionId,\r\n        stream.Latitude,\r\n        stream.Longitude,\r\n        stream.Altitude,\r\n        stream.CarSpeed,\r\n        stream.Heading AS HeadingTowards,\r\n        Ref.Vertical AS VerticalThreshold,\r\n        Ref.Lateral AS LateralThreshold,\r\n        Ref.Forward AS ForwardThreshold,\r\n        Ref.RuleOutput AS RuleOutput,\r\n        udf.GetJerks(Ref.Vertical,Ref.Lateral,Ref.Forward,stream.CapturedJerks) AS Jerks\r\n    FROM \r\n        [StreamData] as stream\r\n    JOIN \r\n        LocationRulesBlob as Ref \r\n    ON \r\n        stream.RuleId = Ref.Id\r\n)\r\n\r\nSELECT\r\n    DeviceId,\r\n    PartitionId,\r\n    Latitude,\r\n    Longitude,\r\n    Altitude,\r\n    CarSpeed,\r\n    HeadingTowards,\r\n    VerticalThreshold,\r\n    LateralThreshold,\r\n    ForwardThreshold,\r\n    RuleOutput,\r\n    Jerks\r\nINTO [LocationRulesHub] \r\nFROM [MatchedData]\r\nWHERE Jerks IS NOT NULL\r\n\r\nSELECT\r\n    DeviceId,\r\n    PartitionId,\r\n    Latitude,\r\n    Longitude,\r\n    Altitude,\r\n    CarSpeed,\r\n    HeadingTowards,\r\n    VerticalThreshold,\r\n    LateralThreshold,\r\n    ForwardThreshold,\r\n    RuleOutput,\r\n    udf.GetStringVersion(Jerks) AS Jerks\r\nINTO [LocationRulesMonitoring]\r\nFROM [MatchedData] \r\nWHERE Jerks IS NOT NULL",
                        "StreamingUnits": 1
                  }
                }
            }
        },
		{
            "apiVersion": "[variables('saVersion')]",
            "type": "Microsoft.StreamAnalytics/streamingjobs",
            "name": "[concat(parameters('suiteName'), '-DefaultRule')]",
            "location": "[variables('location')]",
            "dependsOn": [
                "[concat('Microsoft.Storage/storageAccounts/', parameters('storageName'))]",
                "[concat('Microsoft.Eventhub/namespaces/', parameters('ehName'), '/eventHubs/', variables('ehRuleOutName'))]",
                "[concat('Microsoft.Devices/Iothubs/', parameters('iotHubName'))]"
            ],
            "tags": {
                "IotSuiteType": "[variables('suiteType')]"
            },
            "properties": {
                "sku": {
                    "name": "standard"
                },
                "OutputStartMode": "[parameters('asaStartBehavior')]",
				"EventsLateArrivalMaxDelayInSeconds": 5,
                "EventsOutOfOrderMaxDelayInSeconds": 10,
                "EventsOutOfOrderPolicy": "adjust",
				"Functions": [
					{
						"Name": "GetDefaultRuleID",
						"Properties": {
							"Properties": {
								"Binding": {
									"Properties": {
										"Script": "// Sample UDF which returns sum of two values.\nfunction main(arg1) {\n    return \"300_300\";\n}"
									},
									"Type": "Microsoft.StreamAnalytics/JavascriptUdf"
								},
								"Inputs": [
									{
										"DataType": "any"
									}
								],
								"Output": {
									"DataType": "any"
								}
							},
							"Type": "Scalar"
						}
					},
					{
						"Name": "GetJerks",
						"Properties": {
							"Properties": {
								"Binding": {
									"Properties": {
										"Script": "// UDF (User Defined Function)which returns Captured Jerks if they cross the threshold.\nfunction main(v_threshold,l_threshold,f_threshold,CapturedJerks) {\n    if(v_threshold != null && l_threshold != null && f_threshold != null && CapturedJerks != null)\n    {\n        var hasCrossedThreshold = Boolean(0);\n        var ReturnJerks = null;\n        var jerk;\n\n        for(var i=0;i<CapturedJerks.length;i++)\n        {\n            jerk = CapturedJerks[i];\n            if(Math.abs(jerk.VerticalJerk) > parseFloat(v_threshold) || Math.abs(jerk.LateralJerk) > parseFloat(l_threshold) ||Math.abs(jerk.ForwardJerk) > parseFloat(f_threshold))\n            {\n                hasCrossedThreshold = Boolean(1);\n                break;\n            }  \n        }\n\n        if(hasCrossedThreshold)\n        {\n  		  ReturnJerks = CapturedJerks;\n        }\n\n        return ReturnJerks;\n    }    \n}"
									},
									"Type": "Microsoft.StreamAnalytics/JavascriptUdf"
								},
								"Inputs": [
									{
										"DataType": "any"
									},
									{
										"DataType": "any"
									},
									{
										"DataType": "any"
									},
									{
										"DataType": "any"
									}
								],
								"Output": {
									"DataType": "any"
								}
							},
							"Type": "Scalar"
						}
                    },
					{
						"Name": "GetLocationRuleID",
						"Properties": {
							"Properties": {
                                "Binding": {
									"Properties": {
										"Script": "// UDF which creates ruleID of a location from latitude and longitude.\nfunction main(latitude, longitude) {    \n    var lat = Math.floor(latitude*100)/100;\n    var lng = Math.floor(longitude*100)/100;\n    \n    return lat.toString()+\"_\"+lng.toString();\n}"
									},
									"Type": "Microsoft.StreamAnalytics/JavascriptUdf"
                                },
                                "Inputs": [
									{
										"DataType": "any"
									},
									{
										"DataType": "any"
									}
                                ],
                                "Output": {
									"DataType": "any"
                                }
							},
							"Type": "Scalar"
						}
					},
					{
						"Name": "GetStringVersion",
						"Properties": {
							"Properties": {
                                "Binding": {
									"Properties": {
										"Script": "// UDF that stringifies a json object\nfunction main(collection) {\n    return JSON.stringify(collection);\n}"
									},
									"Type": "Microsoft.StreamAnalytics/JavascriptUdf"
                                },
                                "Inputs": [
									{
										"DataType": "any"
									}
                                ],
                                "Output": {
									"DataType": "any"
                                }
							},
							"Type": "Scalar"
						}
					}
				],
                "Inputs": [
                    {
                        "Name": "LocationRulesBlob",
                        "Properties": {
                            "DataSource": {
                                "Properties": {
                                    "Container": "locationrules",
                                    "DateFormat": "yyyy-MM-dd",
                                    "PathPattern": "locationrules.json",
                                    "BlobName": "locationrules.json",
                                    "StorageAccounts": [
                                        {
                                            "AccountKey": "[listkeys(variables('storageId'), variables('storageVersion')).keys[0].value]",
                                            "AccountName": "[parameters('storageName')]"
                                        }
                                    ],
                                    "TimeFormat": "HH-mm"
                                },
                                "Type": "Microsoft.Storage/Blob"
                            },
                            "Serialization": {
                                "Properties": {
                                    "Encoding": "UTF8"
                                },
                                "Type": "Json"
                            },
                            "Type": "Reference"
                        }
                    },
                    {
                        "Name": "IotTelemetryStream",
                        "Properties": {
                            "DataSource": {
                                "Properties": {
                                    "consumerGroupName": "[variables('defaultruleCGName')]",
                                    "iotHubNamespace": "[parameters('iotHubName')]",
                                    "sharedAccessPolicyKey": "[listkeys(variables('iotHubKeyResource'), variables('iotHubVersion')).primaryKey]",
                                    "sharedAccessPolicyName": "[variables('iotHubKeyName')]"
                                },
                                "Type": "Microsoft.Devices/IotHubs"
                            },
                            "Serialization": {
                                "Properties": {
                                    "Encoding": "UTF8"
                                },
                                "Type": "Json"
                            },
                            "Type": "Stream"
                        }
                    }
                ],
                "Outputs": [
                    {
                        "Name": "LocationRulesHub",
                        "Properties": {
                            "DataSource": {
                                "Properties": {
                                    "EventHubName": "[variables('ehRuleOutName')]",
                                    "ServiceBusNamespace": "[parameters('ehName')]",
                                    "SharedAccessPolicyKey": "[listkeys(variables('ehResourceId'), variables('ehVersion')).primaryKey]",
                                    "SharedAccessPolicyName": "[variables('sbKeyName')]",
                                    "PartitionKey": "PartitionId"
                                },
                                "Type": "Microsoft.ServiceBus/EventHub"
                            },
                            "Serialization": {
                                "Properties": {
                                    "Encoding": "UTF8",
                                    "Format": "Array"
                                },
                                "Type": "Json"
                            }
                        }
                    },
                    {
                        "Name": "LocationRulesMonitoring",
                        "Properties": {
                            "DataSource": {
                                "Properties": {
                                    "Container": "rulesoutput",
                                    "DateFormat": "yyyy/MM/dd",
                                    "TimeFormat": "HH",
                                    "PathPattern": "{date}/{time}",
                                    "StorageAccounts": [
                                        {
                                            "AccountKey": "[listkeys(variables('storageId'), variables('storageVersion')).keys[0].value]",
                                            "AccountName": "[parameters('storageName')]"
                                        }
                                    ]
                                },
                                "Type": "Microsoft.Storage/Blob"
                            },
                            "Serialization": {
                                "Properties": {
                                    "Encoding": "UTF8",
                                    "FieldDelimiter": ","
                                },
                                "Type": "Csv"
                            }
                        }
                    }
                ],
                "Transformation": {
                    "Name": "DefaultLocationRule",
                    "Properties": {
                        "Query": "WITH \r\n    [StreamData]\r\nAS  (\r\n        SELECT \r\n            udf.GetDefaultRuleID(hub.Latitude) AS DefaultId,\r\n            hub.IoTHub.ConnectionDeviceId AS DeviceId,\r\n            hub.PartitionId AS PartitionId,\r\n            hub.Latitude AS Latitude,\r\n            hub.Longitude AS Longitude,\r\n            hub.Altitude AS Altitude,\r\n            hub.Speed AS CarSpeed,\r\n            hub.Heading AS Heading,\r\n            hub.CapturedJerks AS CapturedJerks,\r\n            udf.GetLocationRuleID(hub.Latitude,hub.Longitude) AS RuleId\r\n        FROM \r\n            [IotTelemetryStream] as hub\r\n\t\tPARTITION BY \r\n\t\t\tPartitionId\r\n        WHERE \r\n            hub.[ObjectType] IS NULL\r\n),\r\n[OddData] AS\r\n(\r\n    SELECT \r\n\t\tstream.DefaultId,\r\n        stream.RuleId,\r\n        stream.DeviceId,\r\n        stream.PartitionId,\r\n        stream.Latitude,\r\n        stream.Longitude,\r\n        stream.Altitude,\r\n        stream.CarSpeed,\r\n        stream.Heading AS HeadingTowards,\r\n        stream.CapturedJerks\r\n    FROM \r\n        [StreamData] as stream\r\n    LEFT OUTER JOIN \r\n        LocationRulesBlob as Ref \r\n    ON \r\n        stream.RuleId = Ref.Id\r\n    WHERE\r\n        Ref.Id IS NULL\r\n),\r\n[UnMatchedData] AS\r\n(\r\n    SELECT\r\n        UM.DefaultId,\r\n        UM.RuleId,\r\n        UM.DeviceId,\r\n        UM.PartitionId,\r\n        UM.Latitude,\r\n        UM.Longitude,\r\n        UM.Altitude,\r\n        UM.CarSpeed,\r\n        UM.HeadingTowards,\r\n        Ref.Vertical AS VerticalThreshold,\r\n        Ref.Lateral AS LateralThreshold,\r\n        Ref.Forward AS ForwardThreshold,\r\n        Ref.RuleOutput AS RuleOutput,\r\n        udf.GetJerks(Ref.Vertical,Ref.Lateral,Ref.Forward,UM.CapturedJerks) AS Jerks\r\n    FROM \r\n        [OddData] as UM\r\n    JOIN \r\n        LocationRulesBlob as Ref \r\n    ON \r\n        UM.DefaultId = Ref.Id\r\n)\r\n\r\nSELECT\r\n    DeviceId,\r\n    PartitionId,\r\n    Latitude,\r\n    Longitude,\r\n    Altitude,\r\n    CarSpeed,\r\n    HeadingTowards,\r\n    VerticalThreshold,\r\n    LateralThreshold,\r\n    ForwardThreshold,\r\n    RuleOutput,\r\n    Jerks\r\nINTO [LocationRulesHub] \r\nFROM [UnMatchedData]\r\nWHERE Jerks IS NOT NULL\r\n\r\nSELECT\r\n    DeviceId,\r\n    PartitionId,\r\n    Latitude,\r\n    Longitude,\r\n    Altitude,\r\n    CarSpeed,\r\n    HeadingTowards,\r\n    VerticalThreshold,\r\n    LateralThreshold,\r\n    ForwardThreshold,\r\n    RuleOutput,\r\n    udf.GetStringVersion(Jerks) AS Jerks\r\nINTO [LocationRulesMonitoring]\r\nFROM [UnMatchedData] \r\nWHERE Jerks IS NOT NULL",
                        "StreamingUnits": 1
                  }
                }
            }
        },
        {
            "apiVersion": "[variables('webVersion')]",
            "name": "[variables('webPlanName')]",
            "type": "Microsoft.Web/serverfarms",
            "location": "[variables('location')]",
            "tags": {
                "IotSuiteType": "[variables('suiteType')]"
            },
            "properties": {
                "name": "[variables('webPlanName')]",
                "sku": "[parameters('webSku')]",
                "workerSize": "[parameters('webWorkerSize')]",
                "numberOfWorkers": "[parameters('webWorkerCount')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageName'))]",
                "[resourceId('Microsoft.DocumentDb/databaseAccounts', parameters('docDBName'))]",
                "[resourceId('Microsoft.Devices/Iothubs', parameters('iotHubName'))]"
            ]
        },
        {
            "apiVersion": "[variables('webVersion')]",
            "name": "[variables('webJobPlanName')]",
            "type": "Microsoft.Web/serverfarms",
            "location": "[variables('location')]",
            "tags": {
                "IotSuiteType": "[variables('suiteType')]"
            },
            "properties": {
                "name": "[variables('webJobPlanName')]",
                "sku": "[parameters('webJobSku')]",
                "workerSize": "[parameters('webJobWorkerSize')]",
                "numberOfWorkers": "[parameters('webJobWorkerCount')]"
            },
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('webPlanName'))]",
                "[resourceId('Microsoft.Storage/storageAccounts', parameters('storageName'))]",
                "[resourceId('Microsoft.DocumentDb/databaseAccounts', parameters('docDBName'))]",
                "[resourceId('Microsoft.Devices/Iothubs', parameters('iotHubName'))]",
                "[resourceId('Microsoft.StreamAnalytics/streamingjobs', concat(parameters('suiteName'), '-Telemetry'))]",
                "[resourceId('Microsoft.StreamAnalytics/streamingjobs', concat(parameters('suiteName'), '-DeviceInfo'))]",
                "[resourceId('Microsoft.StreamAnalytics/streamingjobs', concat(parameters('suiteName'), '-Rules'))]",
				"[resourceId('Microsoft.StreamAnalytics/streamingjobs', concat(parameters('suiteName'), '-DefaultRule'))]"
            ]
        },
        {
            "apiVersion": "[variables('webVersion')]",
            "name": "[variables('webSiteName')]",
            "type": "Microsoft.Web/sites",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('webPlanName'))]"
            ],
            "tags": {
                "IotSuiteType": "[variables('suiteType')]"
            },
            "properties": {
                "serverFarmId": "[variables('webPlanName')]",
                "siteConfig": {
                    "AlwaysOn": true
                }
            },
            "resources": [
                {
                    "apiVersion": "[variables('webVersion')]",
                    "name": "MSDeploy",
                    "type": "extensions",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/Sites', variables('webSiteName'))]"
                    ],
                    "properties": {
                        "packageUri": "[parameters('packageUri')]",
                        "connectionString": "",
                        "dbType": ""
                    }
                },
                {
                    "apiVersion": "[variables('webVersion')]",
                    "name": "Appsettings",
                    "type": "config",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/Sites', variables('webSiteName'))]",
                        "[concat('Microsoft.Web/Sites/', variables('webSiteName'), '/Extensions/MSDeploy')]"
                    ],
                    "properties": {
                        "ida.AADTenant": "[parameters('AADTenant')]",
                        "ida.AADInstance": "[parameters('aadInstance')]",
                        "ida.AADClientId": "[parameters('aadClientId')]",
                        "docdb.EndpointUrl": "[reference(variables('docDBResourceId')).documentEndpoint]",
                        "docdb.PrimaryAuthorizationKey": "[listkeys(variables('docDBResourceId'), '2015-04-08').primaryMasterKey]",
                        "iotHub.HostName": "[reference(variables('iotHubResourceId')).hostName]",
                        "iotHub.ConnectionString": "[concat('HostName=', reference(variables('iotHubResourceId')).hostName, ';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(variables('iotHubKeyResource'), variables('iotHubVersion')).primaryKey)]",
                        "device.StorageConnectionString": "[concat('DefaultEndpointsProtocol=https;EndpointSuffix=', parameters('storageEndpointSuffix'), ';AccountName=', parameters('storageName'), ';AccountKey=', listkeys(variables('storageId'), variables('storageVersion')).keys[0].value)]",
                        "device.TableName": "DeviceList",
                        "eventHub.HubName": "[variables('ehOutName')]",
                        "eventHub.ConnectionString": "[listkeys(variables('ehResourceId'), variables('ehVersion')).primaryConnectionString]",
                        "eventHub.StorageConnectionString": "[concat('DefaultEndpointsProtocol=https;EndpointSuffix=', parameters('storageEndpointSuffix'), ';AccountName=', parameters('storageName'), ';AccountKey=', listkeys(variables('storageId'), variables('storageVersion')).keys[0].value)]",
                        "RulesEventHub.Name": "[variables('ehRuleOutName')]",
                        "RulesEventHub.ConnectionString": "[listkeys(variables('ehResourceId'), variables('ehVersion')).primaryConnectionString]",
                        "FeedbackEventHub.Name": "[reference(variables('iotHubResourceId')).eventHubEndpoints.events.path]",
						"FeedbackEventHub.ConnectionString": "[concat('Endpoint=', reference(variables('iotHubResourceId')).eventHubEndpoints.events.endpoint, ';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(variables('iotHubKeyResource'), variables('iotHubVersion')).primaryKey)]",
						"ObjectTypePrefix": "",
						"MapApiQueryKey": "",
                        "SolutionName": "[variables('webSiteName')]"
                    }
                }
            ]
        },
        {
            "apiVersion": "[variables('webVersion')]",
            "name": "[variables('webJobSiteName')]",
            "type": "Microsoft.Web/sites",
            "location": "[variables('location')]",
            "dependsOn": [
                "[resourceId('Microsoft.Web/serverfarms', variables('webJobPlanName'))]"
            ],
            "tags": {
                "IotSuiteType": "[variables('suiteType')]"
            },
            "properties": {
                "serverFarmId": "[variables('webJobPlanName')]",
                "siteConfig": {
                    "AlwaysOn": true
                }
            },
            "resources": [
                {
                    "apiVersion": "[variables('webVersion')]",
                    "name": "MSDeploy",
                    "type": "extensions",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/Sites', variables('webJobSiteName'))]"
                    ],
                    "properties": {
                        "packageUri": "[parameters('webJobPackageUri')]",
                        "connectionString": "",
                        "dbType": ""
                    }
                },
                {

                    "apiVersion": "[variables('webVersion')]",
                    "name": "Appsettings",
                    "type": "config",
                    "dependsOn": [
                        "[resourceId('Microsoft.Web/Sites', variables('webJobSiteName'))]",
                        "[concat('Microsoft.Web/Sites/', variables('webJobSiteName'), '/Extensions/MSDeploy')]"
                    ],
                    "properties": {
                        "ida.AADTenant": "[parameters('AADTenant')]",
                        "ida.AADInstance": "[parameters('aadInstance')]",
                        "ida.AADClientId": "[parameters('aadClientId')]",
                        "docdb.EndpointUrl": "[reference(variables('docDBResourceId')).documentEndpoint]",
                        "docdb.PrimaryAuthorizationKey": "[listkeys(variables('docDBResourceId'), '2015-04-08').primaryMasterKey]",
                        "iotHub.HostName": "[reference(variables('iotHubResourceId')).hostName]",
                        "iotHub.ConnectionString": "[concat('HostName=', reference(variables('iotHubResourceId')).hostName, ';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(variables('iotHubKeyResource'), variables('iotHubVersion')).primaryKey)]",
                        "device.StorageConnectionString": "[concat('DefaultEndpointsProtocol=https;EndpointSuffix=', parameters('storageEndpointSuffix'), ';AccountName=', parameters('storageName'), ';AccountKey=', listkeys(variables('storageId'), variables('storageVersion')).keys[0].value)]",
                        "device.TableName": "DeviceList",
                        "eventHub.HubName": "[variables('ehOutName')]",
                        "eventHub.ConnectionString": "[listkeys(variables('ehResourceId'), variables('ehVersion')).primaryConnectionString]",
                        "eventHub.StorageConnectionString": "[concat('DefaultEndpointsProtocol=https;EndpointSuffix=', parameters('storageEndpointSuffix'), ';AccountName=', parameters('storageName'), ';AccountKey=', listkeys(variables('storageId'), variables('storageVersion')).keys[0].value)]",
                        "RulesEventHub.Name": "[variables('ehRuleOutName')]",
                        "RulesEventHub.ConnectionString": "[listkeys(variables('ehResourceId'), variables('ehVersion')).primaryConnectionString]",
                        "FeedbackEventHub.Name": "[reference(variables('iotHubResourceId')).eventHubEndpoints.events.path]",
						"FeedbackEventHub.ConnectionString": "[concat('Endpoint=', reference(variables('iotHubResourceId')).eventHubEndpoints.events.endpoint, ';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(variables('iotHubKeyResource'), variables('iotHubVersion')).primaryKey)]",
						"ObjectTypePrefix": "",
						"MapApiQueryKey": "",
                        "SolutionName": "[variables('webSiteName')]"
                    }
                }
            ]
        }
    ],
    "outputs": {
        "iotHubHostName": {
            "type": "string",
            "value": "[reference(variables('iotHubResourceId')).hostName]"
        },
        "iotHubConnectionString": {
            "type": "string",
            "value": "[concat('HostName=', reference(variables('iotHubResourceId')).hostName, ';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(variables('iotHubKeyResource'), variables('iotHubVersion')).primaryKey)]"
        },
        "docDbURI": {
            "type": "string",
            "value": "[reference(variables('docDBResourceId')).documentEndpoint]"
        },
        "docDbKey": {
            "type": "string",
            "value": "[listkeys(variables('docDBResourceId'), '2015-04-08').primaryMasterKey]"
        },		
		"mapsQueryKey": {
            "type": "string",
            "value": "0"
        },
        "storageConnectionString": {
            "type": "string",
            "value": "[concat('DefaultEndpointsProtocol=https;EndpointSuffix=', parameters('storageEndpointSuffix'), ';AccountName=', parameters('storageName'), ';AccountKey=', listkeys(variables('storageId'), variables('storageVersion')).keys[0].value)]"
        },
        "ehOutName": {
            "type": "string",
            "value": "[variables('ehOutName')]"
        },
        "ehRuleName": {
            "type": "string",
            "value": "[variables('ehRuleOutName')]"
        },
        "ehConnectionString": {
            "type": "string",
            "value": "[listkeys(variables('ehResourceId'), variables('ehVersion')).primaryConnectionString]"
        },
		"ehFeedbackName": {
            "type": "string",
            "value": "[reference(variables('iotHubResourceId')).eventHubEndpoints.events.path]"
        },
        "ehFeedbackConnectionString": {
            "type": "string",
            "value": "[concat('Endpoint=', reference(variables('iotHubResourceId')).eventHubEndpoints.events.endpoint, ';SharedAccessKeyName=', variables('iotHubKeyName'), ';SharedAccessKey=', listkeys(variables('iotHubKeyResource'), variables('iotHubVersion')).primaryKey)]"
        }
    }
}
